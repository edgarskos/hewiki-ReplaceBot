# -*- coding: utf-8 -*-
"""
ReplaceRobotHe is extension of ReplaceRobot.
It is used in Hebrew Wikipedia for doing common replacements according to defintions in a wiki page

These command line parameters can be used to specify which pages to work on:

&params;

-xml              Retrieve information from a local XML dump (pages-articles
                  or pages-meta-current, see http://download.wikimedia.org).
                  Argument can also be given as "-xml:filename".
-summary:XYZ      Set the summary message text for the edit to XYZ, bypassing
                  the predefined message texts with original and replacements
                  inserted.
-xmlstart         (Only works with -xml) Skip all articles in the XML dump
                  before the one specified (may also be given as
                  -xmlstart:Article).

"""
#
# (C) Eran Roz
# Distributed under the terms of the MIT license.
#
import sys, re, time, codecs, datetime, string
import replaceConfig
sys.path.insert(1, '..')
import wikipedia as pywikibot
import pagegenerators, replace, editarticle
from pywikibot import i18n
import webbrowser

class XmlDumpReplacePageGeneratorHe(replace.XmlDumpReplacePageGenerator):
    def __init__(self, replaceDic, xmlFilename, xmlStart, exceptions):
        self.replaceDict=replaceDic
        replace.XmlDumpReplacePageGenerator.__init__(self, xmlFilename, xmlStart, replaceDic.values(), exceptions)

    def isTextExcepted(self, text):
        """
        This is some hack. changing the replacements HERE,
        assuimg this check is called before replacement for each page
        """
        self.replacements=list(getReplacements(self.replaceDict,text))
        return replace.XmlDumpReplacePageGenerator.isTextExcepted(self,text)
        

class ReplaceRobotHe(replace.ReplaceRobot):
    """ Robot for common replacement in Hebrew Wikipedia according to known replace page """
    def __init__(self,gen, replaceDict, exceptions, editSummary):
        self.replaceDict=replaceDict #replacement dictionary
        self.summaryPrefix=editSummary
        acceptall=True
        allowoverlap=False
        recursive=False
        add_cat=None
        sleep=None
        titlefile=None
        excoutfile =None
        replace.ReplaceRobot.__init__(self, gen, self.replaceDict.values(), exceptions, acceptall,
                               allowoverlap, recursive, add_cat, sleep, editSummary,
                               titlefile, excoutfile)

    """ override regular do replacements by removing disabled replaments according to template,
        than the  method is the same as the super, but is with specifying specific summary """
    def doReplacements(self, original_text):
        """
        Returns the text which is generated by applying all replacements to
        the given text.
        """
        self.replacements=list(getReplacements(self.replaceDict,original_text))
        actucalReplacements=[]
        last_new = original_text
        new_text = original_text
        exceptions = []
        if "inside-tags" in self.exceptions:
            exceptions += self.exceptions['inside-tags']
        if "inside" in self.exceptions:
            exceptions += self.exceptions['inside']
        for old, new in self.replacements:
            if self.sleep is not None:
                time.sleep(self.sleep)
            new_text = pywikibot.replaceExcept(new_text, old, new, exceptions,
                                               allowoverlap=self.allowoverlap)
            if new_text!=last_new:
                actucalReplacements.append(new.strip())
                last_new=new_text
        self.editSummary= self.summaryPrefix + string.join(actucalReplacements,', ')
        return new_text

def getReplacements(replaceDict, text):
    """
    filters disabled replacements from dictionary
    """
    disabled=re.findall(replaceConfig.nobotRgx,text)
    #print "disabled replacements:" + str(disabled)
    for repId,repRgx in replaceDict.iteritems():
        if repId not in disabled:
            yield repRgx

def fillReplementsDict():
    """
    fills replacement dictionary according to replace page
    """
    site = pywikibot.getSite()
    page = pywikibot.Page(site, replaceConfig.replacementsPage)
    text=page.get()
    replaceDict=dict()
    exceptReplace=list()
    for x in re.findall("\\|([0-9]+)\n\\|<nowiki>(.*)</nowiki>\n\\|<nowiki>(.*)</nowiki>\n\\|(?:<nowiki>)?(.*?)(?:\n|</nowiki>)", text):
        try:
            #compile the regex to check if it is support by python
            re.compile(x[1])
            replaceDict[x[0]] = (x[1],re.sub('\\$([0-9])','\\\\\\1',x[2]))
            if x[3]!='':
                exceptReplace.append(x[3])
        except:
            #some regexs are written for c# and are ignored by this bot
            pywikibot.output('Non supported replacement. ID: %s' % x[0])
            pass
    return (replaceDict, exceptReplace)

def main(*args):
    pywikibot.output('Starting hewiki-replacebot')
    editSummary=replaceConfig.defaultSummary
    xmlFilename=None
    for arg in pywikibot.handleArgs(*args):
        if arg.startswith('-summary:'):
            editSummary = arg[9:]
        elif arg.startswith('-xmlstart'):
            if len(arg) == 9:
                xmlStart = pywikibot.input(
                    u'Please enter the dumped article to start with:')
            else:
                xmlStart = arg[10:]
        elif arg.startswith('-xml'):
            if len(arg) == 4:
                xmlFilename = i18n.input('pywikibot-enter-xml-filename')
            else:
                xmlFilename = arg[5:]

    if xmlFilename==None:
        pywikibot.output('no xml dump specified. please fill -xml and the xml file to be used')
        return
    replaceDict,exceptReplace=fillReplementsDict()
    try:
        xmlStart
    except NameError:
        xmlStart = None

    safeTemplates=replaceConfig.safeTemplates
    #add external links templates
    genFactory = pagegenerators.GeneratorFactory()
    for safeCategory in replaceConfig.safeTemplatesCategories:
        citeTemplates=genFactory.getCategoryGen(safeCategory,-1, True)
        citeTemplates=[page.title(withNamespace=False) for page in citeTemplates]
        safeTemplates+=citeTemplates
        
    fileUsageRgx=re.compile(replaceConfig.fileUsageRgx,re.I)
    yiRgx=re.compile('\[\[yi:.*?\]\]')
    safeTemplatesRgx=re.compile(u'\{\{('+string.join(safeTemplates,u'|')+').*?\}\}',re.I)
    exceptions = {
        'title':         [],
        'text-contains': [re.compile(replaceConfig.redirectRgx,re.I)],
        'inside':        [fileUsageRgx,safeTemplatesRgx, re.compile(u'('+string.join(exceptReplace,u'|')+')'),yiRgx],
        'inside-tags':   ['nowiki','math','comment','pre','source','hyperlink','gallery'],
        'require-title': [],
    }
    gen = XmlDumpReplacePageGeneratorHe(replaceDict, xmlFilename, xmlStart, exceptions)
    genFactory.namespaces=replaceConfig.namespaces
    #For debugging pupose, uncomment it to work on specific page
    #pages = [pywikibot.Page(pywikibot.getSite(), PageTitle)
    #                 for PageTitle in [u'PAGENAME']]
    #gen = iter(pages)
    #end of specific page
    maxquerysize=60
    gen = genFactory.getCombinedGenerator(gen)
    gen = pagegenerators.PreloadingGenerator(gen,pageNumber=maxquerysize)
    pywikibot.output('starting replace')
    bot=ReplaceRobotHe(gen,replaceDict,exceptions,editSummary)
    bot.run()
    pywikibot.output('finished all replacements')


if __name__ == "__main__":
    try:
        main()
    finally:
        pywikibot.stopme()
